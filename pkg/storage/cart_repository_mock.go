// Code generated by mockery v2.33.0. DO NOT EDIT.

package storage

import (

	mock "github.com/stretchr/testify/mock"
	"trafilea-tech-challenge/pkg/models"
)

// CartRepository is an autogenerated mock type for the CartRepository type
type CartRepositoryMock struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: cartID, product
func (_m *CartRepositoryMock) AddProduct(cartID string, product models.Product) (models.Cart, error) {
	ret := _m.Called(cartID, product)

	var r0 models.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(string, models.Product) (models.Cart, error)); ok {
		return rf(cartID, product)
	}
	if rf, ok := ret.Get(0).(func(string, models.Product) models.Cart); ok {
		r0 = rf(cartID, product)
	} else {
		r0 = ret.Get(0).(models.Cart)
	}

	if rf, ok := ret.Get(1).(func(string, models.Product) error); ok {
		r1 = rf(cartID, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCart provides a mock function with given fields: userID, cart
func (_m *CartRepositoryMock) CreateCart(userID string, cart models.Cart) models.Cart {
	ret := _m.Called(userID, cart)

	var r0 models.Cart
	if rf, ok := ret.Get(0).(func(string, models.Cart) models.Cart); ok {
		r0 = rf(userID, cart)
	} else {
		r0 = ret.Get(0).(models.Cart)
	}

	return r0
}

// GetCartByID provides a mock function with given fields: cartID
func (_m *CartRepositoryMock) GetCartByID(cartID string) (models.Cart, error) {
	ret := _m.Called(cartID)

	var r0 models.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Cart, error)); ok {
		return rf(cartID)
	}
	if rf, ok := ret.Get(0).(func(string) models.Cart); ok {
		r0 = rf(cartID)
	} else {
		r0 = ret.Get(0).(models.Cart)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cartID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductQuantity provides a mock function with given fields: cartID, product, quantity
func (_m *CartRepositoryMock) UpdateProductQuantity(cartID string, product string, quantity int) (models.Cart, error) {
	ret := _m.Called(cartID, product, quantity)

	var r0 models.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int) (models.Cart, error)); ok {
		return rf(cartID, product, quantity)
	}
	if rf, ok := ret.Get(0).(func(string, string, int) models.Cart); ok {
		r0 = rf(cartID, product, quantity)
	} else {
		r0 = ret.Get(0).(models.Cart)
	}

	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(cartID, product, quantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCartRepository creates a new instance of CartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCartRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CartRepositoryMock {
	mock := &CartRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
